{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minhd\\\\Desktop\\\\marketplaceraca\\\\src\\\\context\\\\AppContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport useRouter from './useRouter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [appStatus, setAppStatus] = useState('loading');\n  const [currentAccount, setCurrentAccount] = useState('');\n  useEffect(() => {\n    checkIfWalletConnected();\n    window.ethereum.on('accountsChanged', async () => {\n      const getCurrentAccount = await window.ethereum.request({\n        method: 'eth_accounts'\n      });\n      console.log(getCurrentAccount);\n      setCurrentAccount(getCurrentAccount[0]);\n    });\n  }, []);\n\n  const checkIfWalletConnected = async () => {\n    if (!window.ethereum) return setAppStatus('noMetamask');\n\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (addressArray.length > 0) {\n        //connected\n        console.log(addressArray);\n        setAppStatus('connected');\n        setCurrentAccount(addressArray[0]);\n      } else {\n        // not connected\n        setAppStatus('not-connected');\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectToWallet = async () => {\n    try {\n      setAppStatus('loading'); // console.log('asdsad')\n      // console.log(window.ethereum);\n\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      if (addressArray.length > 0) {\n        setCurrentAccount(addressArray[0]);\n      } else {\n        setAppStatus('notConnected');\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      appStatus,\n      currentAccount,\n      connectToWallet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppProvider, \"oBR5NRZsmTF7ACYyEwJIsws0nH4=\");\n\n_c = AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["C:/Users/minhd/Desktop/marketplaceraca/src/context/AppContext.js"],"names":["createContext","useEffect","useState","useRouter","AppContext","AppProvider","children","appStatus","setAppStatus","currentAccount","setCurrentAccount","checkIfWalletConnected","window","ethereum","on","getCurrentAccount","request","method","console","log","addressArray","length","err","connectToWallet"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AACA,OAAO,MAAMC,UAAU,gBAAGJ,aAAa,EAAhC;AAEP,OAAO,MAAMK,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACzC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,SAAD,CAA1C;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,sBAAsB;AACtBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,EAAsC,YAAY;AAC9C,YAAMC,iBAAiB,GAAG,MAAMH,MAAM,CAACC,QAAP,CAAgBG,OAAhB,CAAwB;AACpDC,QAAAA,MAAM,EAAE;AAD4C,OAAxB,CAAhC;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;AACAL,MAAAA,iBAAiB,CAACK,iBAAiB,CAAC,CAAD,CAAlB,CAAjB;AACH,KAND;AAOH,GATQ,EASN,EATM,CAAT;;AAWA,QAAMJ,sBAAsB,GAAG,YAAY;AACvC,QAAI,CAACC,MAAM,CAACC,QAAZ,EAAsB,OAAOL,YAAY,CAAC,YAAD,CAAnB;;AACtB,QAAI;AACA,YAAMY,YAAY,GAAG,MAAMR,MAAM,CAACC,QAAP,CAAgBG,OAAhB,CAAwB;AAC/CC,QAAAA,MAAM,EAAE;AADuC,OAAxB,CAA3B;;AAIA,UAAIG,YAAY,CAACC,MAAb,GAAsB,CAA1B,EAA6B;AACzB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACAZ,QAAAA,YAAY,CAAC,WAAD,CAAZ;AAEAE,QAAAA,iBAAiB,CAACU,YAAY,CAAC,CAAD,CAAb,CAAjB;AACH,OAND,MAMO;AACH;AACAZ,QAAAA,YAAY,CAAC,eAAD,CAAZ;AACH;AACJ,KAfD,CAeE,OAAOc,GAAP,EAAY;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH;AACJ,GApBD;;AAsBA,QAAMC,eAAe,GAAG,YAAY;AAChC,QAAI;AACAf,MAAAA,YAAY,CAAC,SAAD,CAAZ,CADA,CAEA;AACA;;AACA,YAAMY,YAAY,GAAG,MAAMR,MAAM,CAACC,QAAP,CAAgBG,OAAhB,CAAwB;AAC/CC,QAAAA,MAAM,EAAE;AADuC,OAAxB,CAA3B;;AAGA,UAAIG,YAAY,CAACC,MAAb,GAAsB,CAA1B,EAA6B;AACzBX,QAAAA,iBAAiB,CAACU,YAAY,CAAC,CAAD,CAAb,CAAjB;AACH,OAFD,MAEK;AACDZ,QAAAA,YAAY,CAAC,cAAD,CAAZ;AACH;AACJ,KAZD,CAYE,OAAOc,GAAP,EAAY;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH;AACJ,GAhBD;;AAkBA,sBACI,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEf,MAAAA,SAAF;AAAaE,MAAAA,cAAb;AAA6Bc,MAAAA;AAA7B,KAA5B;AAAA,cAA6EjB;AAA7E;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA1DM;;GAAMD,W;;KAAAA,W","sourcesContent":["import { createContext, useEffect, useState } from 'react'\r\nimport useRouter from './useRouter'\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n    const [appStatus, setAppStatus] = useState('loading')\r\n    const [currentAccount, setCurrentAccount] = useState('');\r\n\r\n    useEffect(() => {\r\n        checkIfWalletConnected();\r\n        window.ethereum.on('accountsChanged', async () => {\r\n            const getCurrentAccount = await window.ethereum.request({\r\n                method: 'eth_accounts',\r\n            })\r\n            console.log(getCurrentAccount)\r\n            setCurrentAccount(getCurrentAccount[0]);\r\n        })\r\n    }, [])\r\n\r\n    const checkIfWalletConnected = async () => {\r\n        if (!window.ethereum) return setAppStatus('noMetamask')\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: 'eth_accounts',\r\n            })\r\n\r\n            if (addressArray.length > 0) {\r\n                //connected\r\n                console.log(addressArray)\r\n                setAppStatus('connected');\r\n\r\n                setCurrentAccount(addressArray[0]);\r\n            } else {\r\n                // not connected\r\n                setAppStatus('not-connected');\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const connectToWallet = async () => {\r\n        try {\r\n            setAppStatus('loading');\r\n            // console.log('asdsad')\r\n            // console.log(window.ethereum);\r\n            const addressArray = await window.ethereum.request({\r\n                method: 'eth_requestAccounts',\r\n            })\r\n            if (addressArray.length > 0) {\r\n                setCurrentAccount(addressArray[0])\r\n            }else{\r\n                setAppStatus('notConnected')\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AppContext.Provider value={{ appStatus, currentAccount, connectToWallet }}>{children}</AppContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}