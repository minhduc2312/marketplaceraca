{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { useParams, useLocation, useHistory, useRouteMatch } from \"react-router-dom\";\nimport queryString from \"query-string\";\n\nconst useRouter = () => {\n  _s();\n\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch(); // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n\n  return useMemo(() => {\n    return {\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: { ...queryString.parse(location.search),\n        // Convert string to object\n        ...params\n      },\n      // Include match, location, history objects so we have\n      // access to extra React Router functionality if needed.\n      match,\n      location,\n      history\n    };\n  }, [params, match, location, history]);\n};\n\n_s(useRouter, \"Rwg7Mma86I553fS3ZVShWfMSkTE=\", false, function () {\n  return [useParams, useLocation, useHistory, useRouteMatch];\n});\n\nexport default useRouter;","map":{"version":3,"sources":["C:/Users/minhd/Desktop/marketplaceraca/src/context/useRouter.js"],"names":["useMemo","useParams","useLocation","useHistory","useRouteMatch","queryString","useRouter","params","location","history","match","push","replace","pathname","query","parse","search"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACIC,SADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAIIC,aAJJ,QAKO,kBALP;AAMA,OAAOC,WAAP,MAAwB,cAAxB;;AACA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMO,KAAK,GAAGN,aAAa,EAA3B,CAJoB,CAKpB;AACA;;AACA,SAAOJ,OAAO,CAAC,MAAM;AACjB,WAAO;AACH;AACAW,MAAAA,IAAI,EAAEF,OAAO,CAACE,IAFX;AAGHC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OAHd;AAIHC,MAAAA,QAAQ,EAAEL,QAAQ,CAACK,QAJhB;AAKH;AACA;AACA;AACAC,MAAAA,KAAK,EAAE,EACH,GAAGT,WAAW,CAACU,KAAZ,CAAkBP,QAAQ,CAACQ,MAA3B,CADA;AACoC;AACvC,WAAGT;AAFA,OARJ;AAYH;AACA;AACAG,MAAAA,KAdG;AAeHF,MAAAA,QAfG;AAgBHC,MAAAA;AAhBG,KAAP;AAkBH,GAnBa,EAmBX,CAACF,MAAD,EAASG,KAAT,EAAgBF,QAAhB,EAA0BC,OAA1B,CAnBW,CAAd;AAoBH,CA3BD;;GAAMH,S;UACaL,S,EACEC,W,EACDC,U,EACFC,a;;;AAyBlB,eAAeE,SAAf","sourcesContent":["import { useMemo } from \"react\";\r\nimport {\r\n    useParams,\r\n    useLocation,\r\n    useHistory,\r\n    useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\nconst useRouter = () => {\r\n    const params = useParams();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const match = useRouteMatch();\r\n    // Return our custom router object\r\n    // Memoize so that a new object is only returned if something changes\r\n    return useMemo(() => {\r\n        return {\r\n            // For convenience add push(), replace(), pathname at top level\r\n            push: history.push,\r\n            replace: history.replace,\r\n            pathname: location.pathname,\r\n            // Merge params and parsed query string into single \"query\" object\r\n            // so that they can be used interchangeably.\r\n            // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\r\n            query: {\r\n                ...queryString.parse(location.search), // Convert string to object\r\n                ...params,\r\n            },\r\n            // Include match, location, history objects so we have\r\n            // access to extra React Router functionality if needed.\r\n            match,\r\n            location,\r\n            history,\r\n        };\r\n    }, [params, match, location, history]);\r\n}\r\n\r\nexport default useRouter"]},"metadata":{},"sourceType":"module"}