{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/minhd/Desktop/marketplaceraca/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/minhd/Desktop/marketplaceraca/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/minhd/Desktop/marketplaceraca/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{createContext,useEffect,useState}from'react';import useRouter from'./useRouter';import{jsx as _jsx}from\"react/jsx-runtime\";export var AppContext=/*#__PURE__*/createContext();export var AppProvider=function AppProvider(_ref){var children=_ref.children;var _useState=useState('loading'),_useState2=_slicedToArray(_useState,2),appStatus=_useState2[0],setAppStatus=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),currentAccount=_useState4[0],setCurrentAccount=_useState4[1];useEffect(function(){var _window$ethereum;checkIfWalletConnected();(_window$ethereum=window.ethereum)===null||_window$ethereum===void 0?void 0:_window$ethereum.on('accountsChanged',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:checkIfWalletConnected();case 1:case\"end\":return _context.stop();}}},_callee);})));},[]);var checkIfWalletConnected=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var addressArray;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(window.ethereum){_context2.next=2;break;}return _context2.abrupt(\"return\",setAppStatus('noMetamask'));case 2:_context2.prev=2;_context2.next=5;return window.ethereum.request({method:'eth_accounts'});case 5:addressArray=_context2.sent;if(addressArray.length>0){//connected\nsetAppStatus('connected');setCurrentAccount(addressArray[0]);}else{// not connected\nsetAppStatus('not-connected');}_context2.next=13;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](2);console.log(_context2.t0);setAppStatus('error');case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[2,9]]);}));return function checkIfWalletConnected(){return _ref3.apply(this,arguments);};}();var connectToWallet=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var addressArray;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(window.ethereum){_context3.next=2;break;}return _context3.abrupt(\"return\",setAppStatus('noMetamask'));case 2:_context3.prev=2;setAppStatus('loading');// console.log('asdsad')\n// console.log(window.ethereum);\n_context3.next=6;return window.ethereum.request({method:'eth_requestAccounts'});case 6:addressArray=_context3.sent;if(addressArray.length>0){setAppStatus('connected');setCurrentAccount(addressArray[0]);}else{setAppStatus('not-connected');}_context3.next=14;break;case 10:_context3.prev=10;_context3.t0=_context3[\"catch\"](2);console.log(_context3.t0);setAppStatus('error');case 14:case\"end\":return _context3.stop();}}},_callee3,null,[[2,10]]);}));return function connectToWallet(){return _ref4.apply(this,arguments);};}();return/*#__PURE__*/_jsx(AppContext.Provider,{value:{appStatus:appStatus,currentAccount:currentAccount,connectToWallet:connectToWallet},children:children});};","map":{"version":3,"sources":["C:/Users/minhd/Desktop/marketplaceraca/src/context/AppContext.js"],"names":["createContext","useEffect","useState","useRouter","AppContext","AppProvider","children","appStatus","setAppStatus","currentAccount","setCurrentAccount","checkIfWalletConnected","window","ethereum","on","request","method","addressArray","length","console","log","connectToWallet"],"mappings":"odAAA,OAASA,aAAT,CAAwBC,SAAxB,CAAmCC,QAAnC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,C,2CACA,MAAO,IAAMC,CAAAA,UAAU,cAAGJ,aAAa,EAAhC,CAEP,MAAO,IAAMK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CACzC,cAAkCJ,QAAQ,CAAC,SAAD,CAA1C,wCAAOK,SAAP,eAAkBC,YAAlB,eACA,eAA4CN,QAAQ,CAAC,EAAD,CAApD,yCAAOO,cAAP,eAAuBC,iBAAvB,eAEAT,SAAS,CAAC,UAAM,sBACZU,sBAAsB,GACtB,kBAAAC,MAAM,CAACC,QAAP,4DAAiBC,EAAjB,CAAoB,iBAApB,sEAAuC,mIACnCH,sBAAsB,GADa,sDAAvC,IAGH,CALQ,CAKN,EALM,CAAT,CAOA,GAAMA,CAAAA,sBAAsB,2FAAG,4JACtBC,MAAM,CAACC,QADe,2DACEL,YAAY,CAAC,YAAD,CADd,iDAGII,CAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB,CAC/CC,MAAM,CAAE,cADuC,CAAxB,CAHJ,QAGjBC,YAHiB,gBAOvB,GAAIA,YAAY,CAACC,MAAb,CAAsB,CAA1B,CAA6B,CACzB;AACAV,YAAY,CAAC,WAAD,CAAZ,CACAE,iBAAiB,CAACO,YAAY,CAAC,CAAD,CAAb,CAAjB,CACH,CAJD,IAIO,CACH;AACAT,YAAY,CAAC,eAAD,CAAZ,CACH,CAdsB,mFAiBvBW,OAAO,CAACC,GAAR,eACAZ,YAAY,CAAC,OAAD,CAAZ,CAlBuB,sEAAH,kBAAtBG,CAAAA,sBAAsB,2CAA5B,CAuBA,GAAMU,CAAAA,eAAe,2FAAG,4JACfT,MAAM,CAACC,QADQ,2DACSL,YAAY,CAAC,YAAD,CADrB,0BAIhBA,YAAY,CAAC,SAAD,CAAZ,CACA;AACA;AANgB,uBAOWI,CAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB,CAC/CC,MAAM,CAAE,qBADuC,CAAxB,CAPX,QAOVC,YAPU,gBAUhB,GAAIA,YAAY,CAACC,MAAb,CAAsB,CAA1B,CAA6B,CACzBV,YAAY,CAAC,WAAD,CAAZ,CACAE,iBAAiB,CAACO,YAAY,CAAC,CAAD,CAAb,CAAjB,CACH,CAHD,IAGO,CACHT,YAAY,CAAC,eAAD,CAAZ,CACH,CAfe,qFAiBhBW,OAAO,CAACC,GAAR,eACAZ,YAAY,CAAC,OAAD,CAAZ,CAlBgB,uEAAH,kBAAfa,CAAAA,eAAe,2CAArB,CAsBA,mBACI,KAAC,UAAD,CAAY,QAAZ,EAAqB,KAAK,CAAE,CAAEd,SAAS,CAATA,SAAF,CAAaE,cAAc,CAAdA,cAAb,CAA6BY,eAAe,CAAfA,eAA7B,CAA5B,UAA6Ef,QAA7E,EADJ,CAGH,CA3DM","sourcesContent":["import { createContext, useEffect, useState } from 'react'\r\nimport useRouter from './useRouter'\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n    const [appStatus, setAppStatus] = useState('loading')\r\n    const [currentAccount, setCurrentAccount] = useState('');\r\n\r\n    useEffect(() => {\r\n        checkIfWalletConnected();\r\n        window.ethereum?.on('accountsChanged', async () => {\r\n            checkIfWalletConnected();\r\n        })\r\n    }, [])\r\n\r\n    const checkIfWalletConnected = async () => {\r\n        if (!window.ethereum) return setAppStatus('noMetamask')\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: 'eth_accounts',\r\n            })\r\n           \r\n            if (addressArray.length > 0) {\r\n                //connected\r\n                setAppStatus('connected');\r\n                setCurrentAccount(addressArray[0]);\r\n            } else {\r\n                // not connected\r\n                setAppStatus('not-connected');\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n            setAppStatus('error')\r\n\r\n        }\r\n    }\r\n\r\n    const connectToWallet = async () => {\r\n        if (!window.ethereum) return setAppStatus('noMetamask')\r\n\r\n        try {\r\n            setAppStatus('loading');\r\n            // console.log('asdsad')\r\n            // console.log(window.ethereum);\r\n            const addressArray = await window.ethereum.request({\r\n                method: 'eth_requestAccounts',\r\n            })\r\n            if (addressArray.length > 0) {\r\n                setAppStatus('connected')\r\n                setCurrentAccount(addressArray[0])\r\n            } else {\r\n                setAppStatus('not-connected')\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            setAppStatus('error')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AppContext.Provider value={{ appStatus, currentAccount, connectToWallet }}>{children}</AppContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}