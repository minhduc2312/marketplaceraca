[{"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\app\\store.js":"4","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\app\\actions.js":"5","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\context\\AppContext.js":"6","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\app\\reducer.js":"7","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Tabs.js":"8","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\TabPanel.js":"9","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\NFTs\\NFTs.js":"10","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Metamon\\Metamon.js":"11","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Elemon\\Elemon.js":"12","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Metamask.js":"13","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\NFTs\\SwapRaca.js":"14","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\NFTs\\Card.js":"15","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Metamon\\InputSelect.js":"16","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Elemon\\InfoCard.js":"17","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Elemon\\InputFilters.js":"18","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Portfolio\\Portfolio.js":"19","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\config.js":"20","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Portfolio\\MarketHistory.js":"21","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Portfolio\\StatWallet.js":"22"},{"size":643,"mtime":1649127718854,"results":"23","hashOfConfig":"24"},{"size":1327,"mtime":1649127718848,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1649127718855,"results":"26","hashOfConfig":"24"},{"size":151,"mtime":1649127718849,"results":"27","hashOfConfig":"24"},{"size":1653,"mtime":1649127718849,"results":"28","hashOfConfig":"24"},{"size":3562,"mtime":1649135923221,"results":"29","hashOfConfig":"24"},{"size":3385,"mtime":1649127718849,"results":"30","hashOfConfig":"24"},{"size":1844,"mtime":1649143678079,"results":"31","hashOfConfig":"24"},{"size":868,"mtime":1649127718853,"results":"32","hashOfConfig":"24"},{"size":14796,"mtime":1649127718852,"results":"33","hashOfConfig":"24"},{"size":6332,"mtime":1649129964192,"results":"34","hashOfConfig":"24"},{"size":5032,"mtime":1649127718849,"results":"35","hashOfConfig":"24"},{"size":3373,"mtime":1649127718850,"results":"36","hashOfConfig":"24"},{"size":736,"mtime":1649127718852,"results":"37","hashOfConfig":"24"},{"size":1311,"mtime":1649127718852,"results":"38","hashOfConfig":"24"},{"size":2795,"mtime":1649129257517,"results":"39","hashOfConfig":"24"},{"size":2944,"mtime":1649127718850,"results":"40","hashOfConfig":"24"},{"size":7379,"mtime":1649129330393,"results":"41","hashOfConfig":"24"},{"size":1528,"mtime":1649147828457,"results":"42","hashOfConfig":"24"},{"size":350,"mtime":1649127718853,"results":"43","hashOfConfig":"24"},{"size":7367,"mtime":1649143554970,"results":"44","hashOfConfig":"24"},{"size":4491,"mtime":1649149828929,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"189fxm3",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\index.js",[],["97","98"],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\App.js",["99"],"import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport './App.css';\r\nimport { updatePriceAuto } from './app/actions';\r\nimport HeaderTabs from './components/Tabs';\r\nimport axios from \"axios\"\r\nimport { AppProvider } from './context/AppContext';\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const getPrice = async () => {\r\n    const { elmon, raca, btc } = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=radio-caca,elemon,bitcoin&vs_currencies=usd').then(res => {\r\n      return {\r\n        raca: res.data['radio-caca'].usd,\r\n        elmon: res.data['elemon'].usd,\r\n        btc: res.data['bitcoin'].usd,\r\n      }\r\n    });\r\n    const elcoin = await axios.get('https://api.pancakeswap.info/api/v2/tokens/0x092ffbc968203b652b08361adec75e275573f2db').then(res => Number(res.data.data.price).toFixed(8));\r\n    document.title = raca + \" - Marketplace RACA\"\r\n    dispatch(updatePriceAuto({ raca, elmon, elcoin, btc }))\r\n  }\r\n  useEffect(() => {\r\n    getPrice()\r\n    const updatePrice = setInterval(async () => {\r\n      getPrice()\r\n    }, 20000)\r\n\r\n    return () => {\r\n      clearInterval(updatePrice)\r\n    }\r\n  }, [])\r\n  return (\r\n    <div className=\"App\">\r\n      <AppProvider>\r\n        <HeaderTabs />\r\n      </AppProvider>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\app\\store.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\app\\actions.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\context\\AppContext.js",["100"],"import { createContext, useEffect, useState } from 'react'\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Web3 from \"web3\"\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n    const [appStatus, setAppStatus] = useState('loading')\r\n    const [currentAccount, setCurrentAccount] = useState('');\r\n\r\n    const provider = new WalletConnectProvider({\r\n        rpc: {\r\n            56: 'https://matic-mainnet.chainstacklabs.com',\r\n            1: \"https://cloudflare-eth.com\",\r\n\r\n        },\r\n        // bridge: 'https://bridge.walletconnect.org',\r\n        qrcodeModalOptions: {\r\n            mobileLinks: [\r\n                \"metamask\",\r\n                \"trust\",\r\n                \"rainbow\",\r\n                \"argent\",\r\n                \"imtoken\",\r\n                \"pillar\",\r\n            ],\r\n        },\r\n    });\r\n   \r\n    useEffect(() => {\r\n        checkIfWalletConnected();\r\n        window?.ethereum?.on('accountsChanged', async () => {\r\n            checkIfWalletConnected();\r\n        })\r\n    }, [currentAccount])\r\n\r\n    const checkIfWalletConnected = async () => {\r\n        if (!window?.ethereum && !currentAccount) return setAppStatus('noMetamask')\r\n        try {\r\n            if (currentAccount) {\r\n                setAppStatus('connected');\r\n               \r\n            } else {\r\n                const addressArray = await window?.ethereum?.request({\r\n                    method: 'eth_accounts',\r\n                })\r\n\r\n                if (addressArray?.length > 0) {\r\n                    //connected\r\n                    setAppStatus('connected');\r\n                    setCurrentAccount(addressArray[0]);\r\n\r\n                } else {\r\n                    // not connected\r\n                    setAppStatus('not-connected');\r\n                    setCurrentAccount();\r\n                }\r\n            }\r\n        } catch (err) {\r\n            alert(err)\r\n            console.log(err);\r\n            setAppStatus('error')\r\n        }\r\n    }\r\n    const disconnectWC = async () => {\r\n        await provider.disconnect();\r\n        setAppStatus('not-connected');\r\n        setCurrentAccount();\r\n        window.w3 = undefined;\r\n    }\r\n    const walletConnect = async () => {\r\n        try {\r\n            await provider.enable();\r\n\r\n            //create Web3 instance\r\n            const web3 = new Web3(provider)\r\n            window.w3 = web3\r\n            const accounts = await web3.eth.getAccounts();\r\n            const account = accounts[0];\r\n            setCurrentAccount(account.toLowerCase())\r\n            console.log(account)\r\n        } catch (err) {\r\n            console.log(err)\r\n\r\n        }\r\n    }\r\n    const connectToWallet = async () => {\r\n        if (!window.ethereum && !currentAccount) return setAppStatus('noMetamask')\r\n\r\n        try {\r\n            setAppStatus('loading');\r\n            // console.log('asdsad')\r\n            // console.log(window.ethereum);\r\n            const addressArray = await window?.ethereum?.request({\r\n                method: 'eth_requestAccounts',\r\n            })\r\n            if (addressArray.length > 0) {\r\n                setAppStatus('connected')\r\n                setCurrentAccount(addressArray[0])\r\n            } else {\r\n                setAppStatus('not-connected')\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            setAppStatus('error')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AppContext.Provider value={{ appStatus, currentAccount, connectToWallet, walletConnect, disconnectWC }}>{children}</AppContext.Provider>\r\n    )\r\n}","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\app\\reducer.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Tabs.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\TabPanel.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\NFTs\\NFTs.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Metamon\\Metamon.js",["101"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Box } from '@mui/material';\r\nimport { InputSelect } from \"./InputSelect\";\r\nimport { numberWithCommas } from '../NFTs/NFTs';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CircularProgress } from \"@mui/material\";\r\n\r\nimport '../../styles/metamon.css'\r\nimport '../../styles/nfts.css'\r\nimport { handleArrange } from \"../../app/actions\";\r\n\r\n\r\nconst getData = (minScore = 315, level = 1, pageNo = 1) => {\r\n    return axios(`https://market-api.radiocaca.com/nft-sales?saleType&category=13&tokenType&tokenId=-1&pageNo=${pageNo}&pageSize=100&sortBy=single_price&order=asc&min_level=${level}&max_level=60&min_score=${minScore}&max_score=`, {\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n    });\r\n}\r\n\r\nconst Metamon = () => {\r\n    const { minScore, level, arrange } = useSelector(state => state.filters)\r\n\r\n    const [listMetamon, setListMetamon] = useState([])\r\n    const [listShow, setListShow] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const dispatch = useDispatch();\r\n    const { raca } = useSelector(state => state.price);\r\n\r\n    const showInfo = (e) => {\r\n    }\r\n\r\n    const getListMetamon = async () => {\r\n        setLoading(true);\r\n        await getData(minScore, level, 1).then(async (res) => {\r\n            const data = res.data;\r\n            let listData = res.data.list\r\n            // console.log(data.list.total)\r\n            for (let i = 1; i <= Math.floor(data.total / 100); i++) {\r\n                const list = await getData(minScore, level, i + 1).then(res => res.data.list);\r\n                listData = listData.concat(list)\r\n                // console.log(listData)\r\n            }\r\n            setListMetamon(listData)\r\n        });\r\n        setLoading(false);\r\n\r\n    }\r\n    const handleListMetamon = () => {\r\n        setListMetamon([])\r\n        getListMetamon();\r\n        dispatch(handleArrange(0));\r\n    }\r\n    useEffect(() => {\r\n        handleListMetamon();\r\n    }, [])\r\n    useEffect(() => {\r\n        //Get list property\r\n        const sortBy = (filter) => {\r\n            return listMetamon.sort((a, b) => {\r\n                if (filter === 'fixed_price') {\r\n                    return Number(a[filter]) - Number(b[filter])\r\n                } else {\r\n                    return Number(b[filter]) - Number(a[filter])\r\n                }\r\n            });\r\n        }\r\n\r\n        switch (arrange) {\r\n            case 0:\r\n                setListShow(sortBy('fixed_price').slice(0, 10));\r\n                break;\r\n            case 1:\r\n                setListShow(sortBy('level').slice(0, 10));\r\n                break;\r\n            case 2:\r\n                setListShow(sortBy('score').slice(0, 10));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return () => {\r\n            setListShow([])\r\n        }\r\n    }, [listMetamon, arrange]);\r\n\r\n    return (\r\n        <Box sx={{ textAlign: 'left' }}>\r\n            <InputSelect handleConfirm={handleListMetamon} />\r\n            <TableContainer className='table-scroll metamon' component={Paper}>\r\n                <Table className='tablePrice' aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">#</TableCell>\r\n                            <TableCell align=\"center\">\r\n\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                ID\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                Score\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                Level\r\n                            </TableCell>\r\n                            <TableCell align=\"center\" sx={{ width: '25%' }}>\r\n                                Price\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {loading && (\r\n                            <TableRow >\r\n                                <TableCell sx={{ borderLeft:'2px solid'  }} colSpan={6} align=\"center\">\r\n                                    <CircularProgress />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                        {listShow && listShow.map((metamon, index) => {\r\n                            return (\r\n                                <TableRow key={index + 1}>\r\n                                    <TableCell align=\"center\" component=\"th\" scope=\"row\">{index + 1}</TableCell>\r\n                                    <TableCell id={`metamon-${index + 1}`} onMouseEnter={showInfo} align=\"center\" component=\"th\" scope=\"row\" sx={{ position: 'relative' }}>\r\n                                        <img width='50px' height='50px' src={metamon.image_url} alt='Metamon' />\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" component=\"td\" scope=\"row\">\r\n                                        <a href={`https://market.radiocaca.com/#/market-place/${metamon.id}`} target='_blank'\r\n                                            style={{ color: '#fff', textDecoration: 'none' }}\r\n                                            rel=\"noreferrer\"\r\n                                        >\r\n                                            {metamon.token_id}</a></TableCell>\r\n                                    <TableCell align=\"center\" component=\"td\" scope=\"row\">{metamon?.score}</TableCell>\r\n                                    <TableCell align=\"center\" component=\"td\" scope=\"row\">{metamon?.level}</TableCell>\r\n                                    <TableCell align=\"center\" component=\"td\" scope=\"row\">{numberWithCommas(metamon.fixed_price)} (~{(raca * metamon.fixed_price).toFixed(2)})</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Metamon;\r\n\r\n","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Elemon\\Elemon.js",["102","103"],"import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport InputFilters from \"./InputFilters\";\r\nimport \"../../styles/elemon.css\";\r\nimport { Box, CircularProgress, Grid } from \"@mui/material\";\r\nimport InfoCard from \"./InfoCard\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst getElemonItem = (\r\n  pageNumber = 1,\r\n  pageSize = 20,\r\n  priceMode = 2,\r\n  baseCardId,\r\n  tokenId,\r\n  rarities,\r\n  classes,\r\n  purities\r\n) => {\r\n  return axios\r\n    .get(\r\n      `https://app.elemon.io/market/getElemonItems?pageNumber=${pageNumber}&pageSize=${pageSize}&positionType=2&priceMode=${priceMode}&baseCardId=&tokenId=&rarities=&classes=&purities=`\r\n    )\r\n    .then((res) => res.data, {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n    });\r\n};\r\nconst getElemonInfo = (listElemon) => {\r\n  const listTokenId = listElemon.map((item) => item.tokenId);\r\n  return axios\r\n    .get(\r\n      `https://app.elemon.io/elemon/GetElemonInfo?tokenId=${listTokenId?.join(\r\n        \",\"\r\n      )}`\r\n    )\r\n    .then((res) => res.data, {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n    })\r\n    .catch((error) => error);\r\n};\r\n\r\nconst Elemon = () => {\r\n  const [listElemon, setListElemon] = useState([]);\r\n  const [listElemonInfo, setListElemonInfo] = useState([]);\r\n  const [timeUpdated, setTimeUpdated] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [listFilter, setListFilter] = useState([]);\r\n  const { min, max, sort, name, tokenId, aura, rarity } = useSelector(\r\n    (state) => state.filtersElemon\r\n  );\r\n\r\n  const convertDateTime = () => {\r\n    const now = new Date();\r\n    setTimeUpdated(now.toLocaleString());\r\n  };\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      await getElemonItem(1, 100).then(async (res) => {\r\n        await getElemonItem(1, res.paging.totalCount).then((res) =>\r\n          setListElemon(res.data)\r\n        );\r\n      });\r\n    };\r\n    getData();\r\n    convertDateTime();\r\n\r\n    return () => {\r\n      setListElemon([]);\r\n    };\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const getInfo = async () => {\r\n      setLoading(true);\r\n      const size = 250;\r\n      const lengthList = listElemon.length;\r\n      const loop =\r\n        lengthList % size === 0 ? lengthList / size : lengthList / size + 1;\r\n      for (let i = 1; i <= loop; i++) {\r\n        const amount =\r\n          lengthList % size !== 0 && lengthList - i * size < 0\r\n            ? (i - 1) * size + (lengthList % size)\r\n            : i * size;\r\n        await getElemonInfo(listElemon?.slice((i - 1) * size, amount)).then(\r\n          (res) => {\r\n            const listInfo = listElemon\r\n              .slice((i - 1) * size, amount)\r\n              .map((item, index) => {\r\n                return {\r\n                  ...item,\r\n                  point: res?.data[index]?.point,\r\n                };\r\n              });\r\n            setListElemonInfo((pre) => pre.concat(listInfo));\r\n          }\r\n        );\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getInfo();\r\n    return () => {\r\n      setListElemonInfo([]);\r\n    };\r\n  }, [listElemon]);\r\n  useEffect(() => {\r\n    const filter = listElemonInfo\r\n      .filter((elemon) => {\r\n        if (tokenId) {\r\n          return elemon.tokenId === tokenId;\r\n        } else {\r\n          const checkPower = (power, type) => {\r\n            if (!power) return true;\r\n            return type === 1 ? elemon?.point >= power : elemon?.point <= power;\r\n          };\r\n\r\n          const checkName =\r\n            Number(name) !== 0 ? elemon.baseCardId === Number(name) : true;\r\n          const checkRarity =\r\n            rarity.length !== 0 ? rarity.includes(elemon.rarity) : true;\r\n          const checkAura =\r\n            aura.length !== 0 ? aura.includes(elemon.quality) : true;\r\n          return checkPower(min, 1) && checkPower(max, 2) && checkName && checkRarity && checkAura;\r\n        }\r\n      })\r\n      .sort((a, b) => {\r\n        switch (Number(sort)) {\r\n          case 0:\r\n            return a.lastPrice >= b.lastPrice ? 1 : -1;\r\n          case 1:\r\n            return a.lastPrice <= b.lastPrice ? 1 : -1;\r\n          case 2:\r\n            return a.point >= b.point ? 1 : -1;\r\n          case 3:\r\n            return a.point <= b.point ? 1 : -1;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n\r\n    setListFilter(filter);\r\n    return () => {\r\n      setListFilter([]);\r\n    };\r\n  }, [loading, min, max, sort, name, tokenId,aura,rarity]);\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ textAlign: \"center\" }}>\r\n        <InputFilters />\r\n        <p className=\"timeUpdate\">{timeUpdated}</p>\r\n        <Grid container spacing={1}>\r\n          {listFilter &&\r\n            listFilter?.slice(0, 100).map((item, index) => (\r\n              <Grid key={index} item xs={6} md={4} lg={2.2}>\r\n                <InfoCard elemon={item} />\r\n              </Grid>\r\n            ))}\r\n        </Grid>\r\n        {loading && <CircularProgress />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Elemon;\r\n","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Metamask.js",["104","105"],"import { Button } from '@mui/material';\r\nimport React, { useContext } from 'react'\r\nimport { AppContext } from '../context/AppContext'\r\n\r\nconst Metamask = () => {\r\n    const { appStatus, connectToWallet, currentAccount, walletConnect, disconnectWC } = useContext(AppContext);\r\n\r\n\r\n    const app = (status = appStatus) => {\r\n        switch (status) {\r\n            case 'connected':\r\n                return userLoggedIn\r\n\r\n            case 'not-connected':\r\n                return noUserFound\r\n\r\n            case 'noMetamask':\r\n                return noMetamaskFound\r\n\r\n            case 'error':\r\n                return error\r\n\r\n            default:\r\n                return loading\r\n        }\r\n    }\r\n\r\n    const noUserFound = (\r\n        <div style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexDirection: 'column',\r\n            /* width: 25%; */\r\n            alignItems: 'center',\r\n        }}>\r\n            <img alt='' width={`100px`} height='100px' src='/marketplaceraca/metamask.png' />\r\n            <Button sx={{ height: '100%', color: '#fff', background: 'rgb(253 186 28 / 92%)', padding: '5px 10px' }} variant=\"contained\" onClick={() => connectToWallet()}>Connect to Wallet</Button>\r\n            <Button sx={{ height: '100%', color: '#fff', background: 'rgb(253 186 28 / 92%)', padding: '5px 10px', marginTop: '10px' }} variant=\"contained\" onClick={() => walletConnect()}>\r\n                <img width='30px' style={{ marginRight: '5px' }} src='/marketplaceraca/wallet-connect.svg'></img>\r\n                Wallet Connect</Button>\r\n\r\n        </div>\r\n    )\r\n    const userLoggedIn = (\r\n        <div style={{ margin: '5px 0' }}>{currentAccount}\r\n            {window.w3 && <Button sx={{ height: '100%', color: '#fff', background: 'rgb(253 186 28 / 92%)', padding: '2px 10px', marginLeft: '10px' }} variant=\"contained\" onClick={() => disconnectWC()}>\r\n                Log out</Button>}\r\n        </div>\r\n    )\r\n    const noMetamaskFound = (\r\n        <div style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexDirection: 'column',\r\n            /* width: 25%; */\r\n            alignItems: 'center',\r\n        }}>\r\n            <img alt='' width={`100px`} height='100px' src='/marketplaceraca/metamask.png' />\r\n            <p> You must install Metamask, a <br /> virtual Ethereum wallet, in your browser</p>\r\n            <Button sx={{ height: '100%', color: '#fff', background: 'rgb(253 186 28 / 92%)', padding: '5px 10px', marginTop: '10px' }} variant=\"contained\" onClick={() => walletConnect()}>\r\n                <img width='30px' style={{ marginRight: '5px' }} src='/marketplaceraca/wallet-connect.svg'></img>\r\n                Wallet Connect</Button>\r\n\r\n        </div>\r\n\r\n    )\r\n    const error = (\r\n        <div style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexDirection: 'column',\r\n            /* width: 25%; */\r\n            alignItems: 'center',\r\n        }}>\r\n            <img alt='' width={`100px`} height='100px' src='/marketplaceraca/error.png' />\r\n            <p>An error occurred. Please try again later or use another browser</p>\r\n            {/* <p>{errLog}</p> */}\r\n        </div>\r\n    )\r\n    const loading = (\r\n        <div> Loading... </div>\r\n    )\r\n    return (\r\n        <div>{app(appStatus)}</div>\r\n    )\r\n}\r\n\r\nexport default Metamask","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\NFTs\\SwapRaca.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\NFTs\\Card.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Metamon\\InputSelect.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Elemon\\InfoCard.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Elemon\\InputFilters.js",["106","107"],"import {\r\n  Button,\r\n  TextField,\r\n  Box,\r\n  Typography,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  handlePower,\r\n  handleSort,\r\n  handleFilterName,\r\n  handleTokenId,\r\n  addRarity,\r\n  removeRarity,\r\n  addAura,\r\n  removeAura,\r\n} from \"../../app/actions\";\r\n\r\nconst InputFilters = () => {\r\n  const { min, max, rarity, aura } = useSelector(\r\n    (state) => state.filtersElemon\r\n  );\r\n  const [minPower, setMinPower] = useState(min);\r\n  const [maxPower, setMaxPower] = useState(max);\r\n  const listAura = [...Array(9).keys()];\r\n  const dispatch = useDispatch();\r\n\r\n  const listRarity = [\r\n    {\r\n      rarity: \"B\",\r\n      color: \"#7ebeff\",\r\n      textShadow: \"0 0 6px #4553ff\",\r\n    },\r\n    {\r\n      rarity: \"A\",\r\n      color: \"#83ffcb\",\r\n      textShadow: \"0 0 6px #45ffb0\",\r\n    },\r\n    {\r\n      rarity: \"S\",\r\n      color: \"#ff83fa\",\r\n      textShadow: \"0 0 6px #ff45d4\",\r\n    },\r\n    {\r\n      rarity: \"SS\",\r\n      color: \"#ffe283\",\r\n      textShadow: \"0 0 6px #eaff45\",\r\n    },\r\n    {\r\n      rarity: \"SSS\",\r\n      color: \"#ff8383\",\r\n      textShadow: \"0 0 6px #ff2424\",\r\n    },\r\n  ];\r\n\r\n  const handleMinPower = (event) => {\r\n    setMinPower(event.target.value);\r\n  };\r\n  const handleMaxPower = (event) => {\r\n    setMaxPower(event.target.value);\r\n  };\r\n  const handleSortPrice = (event) => {\r\n    dispatch(handleSort(event.target.value));\r\n  };\r\n  const handleName = (event) => {\r\n    dispatch(handleFilterName(event.target.value));\r\n  };\r\n  const handleSubmit = () => {\r\n    dispatch(handlePower({ minPower, maxPower }));\r\n  };\r\n  const changeTokenId = (e) => {\r\n    dispatch(handleTokenId(e.target?.value));\r\n  };\r\n  const handleRarity = (e) => {\r\n    if (e.target.checked) {\r\n      dispatch(addRarity(e.target.value));\r\n    } else {\r\n      dispatch(removeRarity(e.target.value));\r\n    }\r\n  };\r\n  const handleAura = (e) => {\r\n    if (e.target.checked) {\r\n      dispatch(addAura(e.target.value));\r\n    } else {\r\n      dispatch(removeAura(e.target.value));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMinPower(min);\r\n  }, [min]);\r\n\r\n  return (\r\n    <div className=\"filters\">\r\n      <div className=\"filter-content\">\r\n        <div className=\"filter-top\">\r\n          <select onChange={handleSortPrice} className=\"market__select\">\r\n            <option value=\"0\">Lowest price</option>\r\n            <option value=\"1\">Highest price</option>\r\n            <option value=\"2\">Lowest Point</option>\r\n            <option value=\"3\">Highest Point</option>\r\n          </select>\r\n          <select onChange={(e) => handleName(e)} className=\"market__select\">\r\n            <option value=\"0\">Elemon name</option>\r\n            <option value=\"4\">Neikoo</option>\r\n            <option value=\"8\">Skurumi</option>\r\n            <option value=\"9\">RusMoonch</option>\r\n            <option value=\"10\">PoxArchies</option>\r\n            <option value=\"11\">Legolas</option>\r\n            <option value=\"12\">Mykasa</option>\r\n            <option value=\"15\">Hyugar</option>\r\n            <option value=\"16\">Inori</option>\r\n            <option value=\"22\">Kuroo</option>\r\n            <option value=\"17\">Elight</option>\r\n            <option value=\"20\">Finter</option>\r\n            <option value=\"21\">Ties</option>\r\n            <option value=\"26\">Hoorus</option>\r\n            <option value=\"6\">Raizer</option>\r\n            <option value=\"19\">Scary</option>\r\n            <option value=\"13\">Cokoner</option>\r\n          </select>\r\n          <Box sx={{ width: \"100%\" }}>\r\n            <Box className=\"filters_expand\">\r\n              <Box className=\"filter_item\">\r\n                <Typography variant=\"h5\">Rarity</Typography>\r\n                <FormControl\r\n                  component=\"fieldset\"\r\n                  className=\"checkbox_item rarity\"\r\n                >\r\n                  {listRarity.length &&\r\n                    listRarity.map((item, index) => (\r\n                      <FormControlLabel\r\n                        onChange={handleRarity}\r\n                        key={index}\r\n                        value={index + 1}\r\n                        control={\r\n                          <Checkbox\r\n                            sx={{\r\n                              color: item.color,\r\n                              \"&.Mui-checked\": {\r\n                                color: item.color,\r\n                              },\r\n                            }}\r\n                          />\r\n                        }\r\n                        label={item.rarity}\r\n                        labelPlacement=\"end\"\r\n                        sx={{ color: item.color, textShadow: item.textShadow }}\r\n                      />\r\n                    ))}\r\n                </FormControl>\r\n              </Box>\r\n              <Box className=\"filter_item\">\r\n                <Typography variant=\"h5\">Aura</Typography>\r\n                <FormControl\r\n                  component=\"fieldset\"\r\n                  className=\"checkbox_item aura\"\r\n                >\r\n                  {listAura.map((item, index) => (\r\n                    <FormControlLabel\r\n                      key={index}\r\n                      onChange={handleAura}\r\n                      value={item + 1}\r\n                      control={\r\n                        <Checkbox\r\n                          sx={{\r\n                            color: \"#ffe283\",\r\n                            \"&.Mui-checked\": {\r\n                              color: \"#ffe283\",\r\n                            },\r\n                          }}\r\n                        />\r\n                      }\r\n                      label={\r\n                        <img\r\n                          width=\"35px\"\r\n                          alt=\"aura\"\r\n                          src={`https://app.elemon.io/assets/images/aura/quality_${item + 1\r\n                            }.png`}\r\n                        />\r\n                      }\r\n                      labelPlacement=\"end\"\r\n                    />\r\n                  ))}\r\n                </FormControl>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n          <input\r\n            onBlur={changeTokenId}\r\n            className=\"market__input\"\r\n            placeholder=\"Elemon Id\"\r\n            type=\"number\"\r\n          />\r\n\r\n          <Box className=\"filter_power\">\r\n            <TextField\r\n              value={minPower}\r\n              onChange={handleMinPower}\r\n              sx={{ width: 100, marginRight: \"0.5rem\" }}\r\n              id=\"min-power\"\r\n              label=\"Min\"\r\n              variant=\"standard\"\r\n              type=\"number\"\r\n              className=\"input_power min\"\r\n            />\r\n            <TextField\r\n              value={maxPower}\r\n              onChange={handleMaxPower}\r\n              sx={{ width: 100, marginRight: \"0.5rem\" }}\r\n              id=\"max-power\"\r\n              label=\"Max\"\r\n              variant=\"standard\"\r\n              type=\"number\"\r\n              className=\"input_power max\"\r\n            />\r\n            <Button\r\n              sx={{ height: \"100%\", color: \"#383838\", background: \"#fcc33c\" }}\r\n              variant=\"contained\"\r\n              onClick={handleSubmit}\r\n              className=\"btnConfirm_power\"\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </Box>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputFilters;\r\n","C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Portfolio\\Portfolio.js",["108","109"],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\config.js",[],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Portfolio\\MarketHistory.js",["110","111","112"],"C:\\Users\\Admin\\Desktop\\marketplaceraca\\src\\components\\Portfolio\\StatWallet.js",["113","114","115","116"],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":34,"column":6,"nodeType":"123","endLine":34,"endColumn":8,"suggestions":"124"},{"ruleId":"121","severity":1,"message":"125","line":35,"column":8,"nodeType":"123","endLine":35,"endColumn":24,"suggestions":"126"},{"ruleId":"121","severity":1,"message":"127","line":55,"column":8,"nodeType":"123","endLine":55,"endColumn":10,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":130,"column":20,"nodeType":"131","messageId":"132","endLine":130,"endColumn":22},{"ruleId":"121","severity":1,"message":"133","line":149,"column":6,"nodeType":"123","endLine":149,"endColumn":58,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":39,"column":17,"nodeType":"137","endLine":39,"endColumn":108},{"ruleId":"135","severity":1,"message":"136","line":61,"column":17,"nodeType":"137","endLine":61,"endColumn":108},{"ruleId":"138","severity":1,"message":"139","line":24,"column":21,"nodeType":"140","messageId":"141","endLine":24,"endColumn":27},{"ruleId":"138","severity":1,"message":"142","line":24,"column":29,"nodeType":"140","messageId":"141","endLine":24,"endColumn":33},{"ruleId":"138","severity":1,"message":"143","line":1,"column":29,"nodeType":"140","messageId":"141","endLine":1,"endColumn":38},{"ruleId":"138","severity":1,"message":"144","line":12,"column":13,"nodeType":"140","messageId":"141","endLine":12,"endColumn":27},{"ruleId":"138","severity":1,"message":"145","line":2,"column":8,"nodeType":"140","messageId":"141","endLine":2,"endColumn":16},{"ruleId":"121","severity":1,"message":"146","line":55,"column":6,"nodeType":"123","endLine":55,"endColumn":22,"suggestions":"147"},{"ruleId":"121","severity":1,"message":"148","line":115,"column":6,"nodeType":"123","endLine":115,"endColumn":19,"suggestions":"149"},{"ruleId":"138","severity":1,"message":"150","line":70,"column":13,"nodeType":"140","messageId":"141","endLine":70,"endColumn":17},{"ruleId":"138","severity":1,"message":"151","line":71,"column":13,"nodeType":"140","messageId":"141","endLine":71,"endColumn":25},{"ruleId":"138","severity":1,"message":"152","line":72,"column":13,"nodeType":"140","messageId":"141","endLine":72,"endColumn":26},{"ruleId":"121","severity":1,"message":"153","line":95,"column":6,"nodeType":"123","endLine":95,"endColumn":22,"suggestions":"154"},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPrice'. Either include it or remove the dependency array.","ArrayExpression",["157"],"React Hook useEffect has a missing dependency: 'checkIfWalletConnected'. Either include it or remove the dependency array.",["158"],"React Hook useEffect has a missing dependency: 'handleListMetamon'. Either include it or remove the dependency array.",["159"],"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'listElemonInfo'. Either include it or remove the dependency array.",["160"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'rarity' is assigned a value but never used.","Identifier","unusedVar","'aura' is assigned a value but never used.","'useEffect' is defined but never used.","'currentAccount' is assigned a value but never used.","'Metamask' is defined but never used.","React Hook useEffect has a missing dependency: 'getMarketHistory'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has missing dependencies: 'currentAccount' and 'length'. Either include them or remove the dependency array.",["162"],"'data' is assigned a value but never used.","'totalDeposit' is assigned a value but never used.","'totalWithDraw' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getBalanceOfTokens', 'getTransaction', and 'web3.eth'. Either include them or remove the dependency array.",["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [getPrice]",{"range":"178","text":"179"},"Update the dependencies array to be: [checkIfWalletConnected, currentAccount]",{"range":"180","text":"181"},"Update the dependencies array to be: [handleListMetamon]",{"range":"182","text":"183"},"Update the dependencies array to be: [loading, min, max, sort, name, tokenId, aura, rarity, listElemonInfo]",{"range":"184","text":"185"},"Update the dependencies array to be: [currentAccount, getMarketHistory]",{"range":"186","text":"187"},"Update the dependencies array to be: [currentAccount, historyList, length]",{"range":"188","text":"189"},"Update the dependencies array to be: [currentAccount, getBalanceOfTokens, getTransaction, web3.eth]",{"range":"190","text":"191"},[1170,1172],"[getPrice]",[1060,1076],"[checkIfWalletConnected, currentAccount]",[2088,2090],"[handleListMetamon]",[4436,4488],"[loading, min, max, sort, name, tokenId, aura, rarity, listElemonInfo]",[2053,2069],"[currentAccount, getMarketHistory]",[4266,4279],"[currentAccount, historyList, length]",[3037,3053],"[currentAccount, getBalanceOfTokens, getTransaction, web3.eth]"]